package freecell.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import freecell.generator.UserTracking;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_TRACKING.
*/
public class UserTrackingDao extends AbstractDao<UserTracking, Long> {

    public static final String TABLENAME = "USER_TRACKING";

    /**
     * Properties of entity UserTracking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tracking_id = new Property(1, String.class, "tracking_id", false, "TRACKING_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Session_id = new Property(3, String.class, "session_id", false, "SESSION_ID");
        public final static Property Time_start = new Property(4, String.class, "time_start", false, "TIME_START");
        public final static Property Last_active_time = new Property(5, String.class, "last_active_time", false, "LAST_ACTIVE_TIME");
        public final static Property Close_time = new Property(6, String.class, "close_time", false, "CLOSE_TIME");
        public final static Property Sent = new Property(7, String.class, "sent", false, "SENT");
        public final static Property Ack = new Property(8, String.class, "ack", false, "ACK");
        public final static Property Device_id = new Property(9, String.class, "device_id", false, "DEVICE_ID");
    };


    public UserTrackingDao(DaoConfig config) {
        super(config);
    }
    
    public UserTrackingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_TRACKING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TRACKING_ID' TEXT," + // 1: tracking_id
                "'USER_ID' TEXT," + // 2: user_id
                "'SESSION_ID' TEXT," + // 3: session_id
                "'TIME_START' TEXT," + // 4: time_start
                "'LAST_ACTIVE_TIME' TEXT," + // 5: last_active_time
                "'CLOSE_TIME' TEXT," + // 6: close_time
                "'SENT' TEXT," + // 7: sent
                "'ACK' TEXT," + // 8: ack
                "'DEVICE_ID' TEXT);"); // 9: device_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_TRACKING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTracking entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tracking_id = entity.getTracking_id();
        if (tracking_id != null) {
            stmt.bindString(2, tracking_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(4, session_id);
        }
 
        String time_start = entity.getTime_start();
        if (time_start != null) {
            stmt.bindString(5, time_start);
        }
 
        String last_active_time = entity.getLast_active_time();
        if (last_active_time != null) {
            stmt.bindString(6, last_active_time);
        }
 
        String close_time = entity.getClose_time();
        if (close_time != null) {
            stmt.bindString(7, close_time);
        }
 
        String sent = entity.getSent();
        if (sent != null) {
            stmt.bindString(8, sent);
        }
 
        String ack = entity.getAck();
        if (ack != null) {
            stmt.bindString(9, ack);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(10, device_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserTracking readEntity(Cursor cursor, int offset) {
        UserTracking entity = new UserTracking( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tracking_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // session_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_start
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // last_active_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // close_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ack
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // device_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTracking entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTracking_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSession_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime_start(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLast_active_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClose_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAck(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDevice_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserTracking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserTracking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
