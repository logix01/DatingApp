package freecell.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import freecell.generator.Contacts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACTS.
*/
public class ContactsDao extends AbstractDao<Contacts, Long> {

    public static final String TABLENAME = "CONTACTS";

    /**
     * Properties of entity Contacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Contact_id = new Property(1, String.class, "contact_id", false, "CONTACT_ID");
        public final static Property Contact_name = new Property(2, String.class, "contact_name", false, "CONTACT_NAME");
        public final static Property Contact_number = new Property(3, String.class, "contact_number", false, "CONTACT_NUMBER");
        public final static Property Contact_imageUri = new Property(4, String.class, "contact_imageUri", false, "CONTACT_IMAGE_URI");
        public final static Property Contact_imageLocalUri = new Property(5, String.class, "contact_imageLocalUri", false, "CONTACT_IMAGE_LOCAL_URI");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
        public final static Property Contact_email = new Property(7, String.class, "contact_email", false, "CONTACT_EMAIL");
        public final static Property IsFreeCell = new Property(8, Boolean.class, "isFreeCell", false, "IS_FREE_CELL");
        public final static Property Fifteen_digit_number = new Property(9, String.class, "fifteen_digit_number", false, "FIFTEEN_DIGIT_NUMBER");
    };


    public ContactsDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACTS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONTACT_ID' TEXT," + // 1: contact_id
                "'CONTACT_NAME' TEXT," + // 2: contact_name
                "'CONTACT_NUMBER' TEXT," + // 3: contact_number
                "'CONTACT_IMAGE_URI' TEXT," + // 4: contact_imageUri
                "'CONTACT_IMAGE_LOCAL_URI' TEXT," + // 5: contact_imageLocalUri
                "'USERNAME' TEXT," + // 6: username
                "'CONTACT_EMAIL' TEXT," + // 7: contact_email
                "'IS_FREE_CELL' INTEGER," + // 8: isFreeCell
                "'FIFTEEN_DIGIT_NUMBER' TEXT);"); // 9: fifteen_digit_number
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindString(2, contact_id);
        }
 
        String contact_name = entity.getContact_name();
        if (contact_name != null) {
            stmt.bindString(3, contact_name);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(4, contact_number);
        }
 
        String contact_imageUri = entity.getContact_imageUri();
        if (contact_imageUri != null) {
            stmt.bindString(5, contact_imageUri);
        }
 
        String contact_imageLocalUri = entity.getContact_imageLocalUri();
        if (contact_imageLocalUri != null) {
            stmt.bindString(6, contact_imageLocalUri);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String contact_email = entity.getContact_email();
        if (contact_email != null) {
            stmt.bindString(8, contact_email);
        }
 
        Boolean isFreeCell = entity.getIsFreeCell();
        if (isFreeCell != null) {
            stmt.bindLong(9, isFreeCell ? 1l: 0l);
        }
 
        String fifteen_digit_number = entity.getFifteen_digit_number();
        if (fifteen_digit_number != null) {
            stmt.bindString(10, fifteen_digit_number);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contacts readEntity(Cursor cursor, int offset) {
        Contacts entity = new Contacts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contact_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contact_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contact_imageUri
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact_imageLocalUri
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // username
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contact_email
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isFreeCell
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // fifteen_digit_number
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contacts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContact_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContact_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContact_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContact_imageUri(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact_imageLocalUri(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContact_email(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFreeCell(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setFifteen_digit_number(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contacts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contacts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
